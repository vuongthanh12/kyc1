#include <iostream>

struct Node {
    int data;   // Информационная часть узла
    Node* next; // Указатель на следующий узел

    // Конструктор узла для инициализации значений
    Node(int val) : data(val), next(nullptr) {}
};

struct List {
    Node* head; // Указатель на первый узел списка
    Node* tail; // Указатель на последний узел списка

    // Конструктор списка для инициализации начальных значений
    List() : head(nullptr), tail(nullptr) {}

    // Проверка, пуст ли список
    bool isEmpty() {
        return head == nullptr;
    }

    // Добавление узла в конец списка
    void addNode(int val) {
        Node* newNode = new Node(val);
        if (isEmpty()) {
            head = tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    // Печать списка
    void printList() {
        Node* current = head;
        while (current != nullptr) {
            std::cout << current->data << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }
};

// Функция переформирования списка, начиная с заданной позиции
void reorderListFromPosition(List &list, int position) {
    if (position <= 0 || list.isEmpty()) return;

    Node* current = list.head;
    Node* prev = nullptr;
    int count = 1;

    while (current != nullptr && count < position) {
        prev = current;
        current = current->next;
        count++;
    }

    if (current == nullptr) return;

    if (prev != nullptr) {
        prev->next = nullptr;
        Node* temp = current;

        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = list.head;
        list.head = current;
    }
}

// Функция вставки узла в упорядоченный по невозрастанию список
void insertIntoDescendingOrderList(List &list, int value) {
    Node* newNode = new Node(value);
    if (list.isEmpty() || list.head->data <= value) {
        newNode->next = list.head;
        list.head = newNode;
        if (list.tail == nullptr) list.tail = newNode;
    } else {
        Node* current = list.head;
        while (current->next != nullptr && current->next->data > value) {
            current = current->next;
        }
        newNode->next = current->next;
        current->next = newNode;
        if (newNode->next == nullptr) list.tail = newNode;
    }
}

// Функция удаления повторяющихся значений из списка
void removeDuplicates(List &list) {
    if (list.isEmpty()) return;

    Node* current = list.head;
    while (current != nullptr && current->next != nullptr) {
        Node* runner = current;
        while (runner->next != nullptr) {
            if (runner->next->data == current->data) {
                Node* temp = runner->next;
                runner->next = runner->next->next;
                delete temp;
                if (runner->next == nullptr) list.tail = runner;
            } else {
                runner = runner->next;
            }
        }
        current = current->next;
    }
}

int main() {
    // Тестирование переформирования списка
    List L1;
    L1.addNode(1);
    L1.addNode(2);
    L1.addNode(3);
    L1.addNode(4);
    L1.addNode(5);

    std::cout << "Исходный список L1: ";
    L1.printList();

    reorderListFromPosition(L1, 3);
    std::cout << "Переформированный список L1 с позиции 3: ";
    L1.printList();

    // Тестирование вставки узла в упорядоченный список
    List L2;
    insertIntoDescendingOrderList(L2, 5);
    insertIntoDescendingOrderList(L2, 3);
    insertIntoDescendingOrderList(L2, 8);
    insertIntoDescendingOrderList(L2, 5);
    insertIntoDescendingOrderList(L2, 10);
    insertIntoDescendingOrderList(L2, 3);

    std::cout << "Список L2 после вставки узлов: ";
    L2.printList();

    // Тестирование удаления повторяющихся значений
    removeDuplicates(L2);
    std::cout << "Список L2 после удаления повторяющихся значений: ";
    L2.printList();

    return 0;
}
